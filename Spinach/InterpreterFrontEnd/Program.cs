////////////////////////////////////////////////////////////////////////
// Program.cs: demonstrates the interpreter for the Spinach language.
// 
// version: 1.0
// description: part of the interpreter example for the visitor design
//  pattern.
// author: Srinivasan Sundararajan (ssunda04@syr.edu)
// language: C# .Net 3.5
////////////////////////////////////////////////////////////////////////
// Version control:
// Version 1.2: kg: Made changes for structassign Class, if-else class, for class, matrixelem, vectorelem, Matrixdeclaration, VectorDeclaration, Keyword
// Version 1.3: kg: added function calls for integration with core team. 11/10/09


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using Antlr.Runtime;

///-- Class program
///-- Will compute the symentic check, call lexar and parser generated by ANTLR.
///-- Also, override ReportError function from spinachParser for error reporting.


namespace Spinach
{
 public class Program :  spinachParser
   {
       static StringBuilder strBuilder = new StringBuilder();
       private string exLine;

       private Core coreObject;


       public delegate void errorreport(int code, string errormessage);
       public event errorreport error;
       public void Onerror(int code, string errormessage)
       {
           if (error != null)
               error(code, errormessage);
       }
       public override void ReportError(RecognitionException e)
       {
         if (getEx() == null)
         {

           string[] arr = TokenNames;
           string str1 = GetErrorHeader(e);
           string str2 = GetErrorMessage(e, arr);
           strBuilder.Append(str1 + " " + str2 + "\n");
           setException(e);
         }
         else
         {
           string str = e.Line.ToString() + e.CharPositionInLine.ToString();
           if (str != getEx())
           {
             string[] arr = TokenNames;
             string str1 = GetErrorHeader(e);
             string str2 = GetErrorMessage(e, arr);
             strBuilder.Append(str1 + " " + str2 + "\n");
             setException(e);
           }
         }
       }
       public string returnError()
       {
           return strBuilder.ToString();
       }

       public void setException(RecognitionException e)
       {
         exLine = e.Line.ToString() + e.CharPositionInLine.ToString();
       }
       public string getEx()
       {
         return exLine;
       }
       public Program(CommonTokenStream str,Core coreObj):base(str)
       {
           strBuilder = new StringBuilder();
           exLine = "";
           coreObject = coreObj;
       }

      public void VisitLine(String line){
         ANTLRStringStream string_stream = new ANTLRStringStream(line);
         spinachLexer lexer = new spinachLexer(string_stream);
         CommonTokenStream tokens = new CommonTokenStream(lexer);			
         spinachParser parser = new Program(tokens,coreObject);
         try {
             spinachParser.program_return program = parser.program(); //h= (l+j)*h*l+l-h;
             if (strBuilder.ToString() == "")
             {
                 List<Element> elements = program.ret;

                 ///-- call core function. to pass list of element.
                 coreObject.setAST(elements);

                 for (int i = 0; i < elements.Count; i++)
                 {
                     Element curr = elements[i];
                     //curr.Accept(print_visitor);
                     //curr.Accept(interp_visitor);
                 }
             }
             else
             {
                 Onerror(101, strBuilder.ToString());
             }
          } catch (RecognitionException e)  {
              Onerror(102, e.Message);
          } 
      }

      public void RunEvalLoop(){
         while(true){
           Console.Write("Interp> ");
           String line = Console.ReadLine();
           if (line == "reset") { }
           else
               VisitLine(line);        
         }
      }
   }



    /// <summary>
    /// -- Executor Class.... 
    /// -- UI team will call this class with core object.
    /// </summary>

 public class exec
 {
     private Core coreObject;

  //   public exec()
  //   {
  //   }

     public exec(Core coreObj)
     {
         coreObject = coreObj;
     
     }

     public void Visitline(string args)
     {    
         CommonTokenStream str = new CommonTokenStream();
         //We need the syntax for the core object
         Program myprog = new Program(str,coreObject);        
         myprog.error += new Program.errorreport(Onerror);
                  myprog.VisitLine(args);
     }
     public List<string> getKeywords()
     {
       Keywords obj = new Keywords();
       return obj.getkeywords();
     }
     public delegate void errorreport(int code, string errormessage);
     public event errorreport error_;
     public void Onerror(int code, string message)
     {
       if (error_ != null)
         error_(code, message);
     }
 }
}


/*
 * Test class
 * Entery point for console application for front end team.
 * 
 * 
 */

namespace Spinach
{

    public class UI
    {
        public static void Main(string[] args)
        {
            Core coreObj = new Core();
            Spinach.exec obj = new Spinach.exec(coreObj);
            List<string> keywords = new List<string>();
            keywords = obj.getKeywords();
            obj.error_ += new Spinach.exec.errorreport(error);
            //obj.Visitline("string s;  s =\"int\";");
            // obj.Visitline("parallelfor(i->1to10){Vector<int>[2] a =[1,2,3,4];}");
            //  obj.Visitline("subPlot(1,a,\"abc\",1D);plot(b,\"abcd\",1D);for(i->1to4){struct s{int a;}; s.a = 0;//this is a comment string s; s = \"This is a example\";}");
            // obj.Visitline("if(a<=0){int a; a =9; double c; Vector<double>[2] vec=[1.1,2.2]; if(a==9){Matrix<int>[2][2] mat= [1,2,3,4];int d; return mat;} return a;}else{double e; return e;}");
            // obj.Visitline("int copy(Matrix<int> a,Vector<double> b , int a){ int h; int l; for(i->1to100){a=9; if(a==9){ return mat;}} return a; int j; h= (l+j)*h*l+l-h;}");
            //obj.Visitline("if(a>=0){int a; vecotor<int>[] = [];}"); 
            // obj.Visitline("struct s{int a;int b; string s;};s sObj;sObj.a = 10;print sObj.a;print \"hello\";"); ///-- string should be there in struct.
            obj.Visitline("setPlotAxis(1.8);");
            //  obj.Visitline("string s; s = \"hello\"; if(s == \"hello\"){} parallelfor(q->1to10){int a;} s = fuun(a);int func(){} print a[1]; print a[2][2];");
            obj.Visitline("subPlot(1,a,\"abc\",1D);vec[i]=i + 2;mat[i][j] = i + 2;");
        }
        public static void error(int code, string message)
        {
            Console.Write(code + " ");
            Console.Write(message);
        }
    }
}

///-- InterpreterVisitor class of core team, for testing.. kg. 
///-- 
///
/*
public class Core
{
    public void setAST(List<Element> ele)
    {
        Console.WriteLine("Best luck core team...!!!!");
    }
}*/